const querystring     = require('querystring');
const http            = require('http');

// Authentication Middleware
module.exports.authenticationMiddleware = function authenticationMiddleware(req, res, next){
  const options = {
    hostname: req.swagger.swaggerObject.host.replace(/:\d*/, ''),
    port: req.swagger.swaggerObject.host.replace(/\w*:/, ''),
    path: "/login",
    method: "POST",
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Cookie': 'username=api; utoken=manager;',
    }
  };

  const postData = querystring.stringify({
     'username': req.header("username"),
     'pwd': req.header("password")
  });

  const request = http.request(options, (response) => {
      response.setEncoding('utf8');
      response.on('data', (chunk) => {
          var data = JSON.parse(chunk);
          if (data.success) {
              next();
          } else {
              res.header({"content-type": "application/json"});
              res.status(403).send(JSON.stringify({"message": "Unauthenticated"}));
          }
      });
  });

  request.on('error', (e) => {
     console.error(`Problem with Request: ${e.message}`);
  });

  request.write(postData);
  request.end();
}

// Gateway Middleware
module.exports.gatewayMiddleware = function gatewayMiddleware(req, res, next){
    try {
        const integration = req.swagger.operation["x-apigateway-integration"];
        const options = {
            hostname: integration.hostname,
            port: integration.port,
            path: integration.path + "?" + querystring.stringify(req.query),
            method: integration.httpMethod,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cookie': 'username=api; utoken=manager;',
            },
            query: req.query,
            params: req.params
        };

        var body = "";

        const request = http.request(options, (response) => {
            response.setEncoding('utf8');
        response.on('data', (chunk) => {
            console.log(`BODY: ${chunk}`);
        body += chunk;
    });
        response.on('end', () =>
        {
            var data = JSON.parse(body);
        if (data.success) {
            res.data = data;
            next();
        } else {
            res.header({"content-type": "application/json"});
            res.status(403).send(JSON.stringify({"message": "Unauthenticated"}));
        }
    }
    );
    });



        request.on('error', (e) => {
            console.error(`Problem with Request: ${e.message}`);
    });
        request.end();
    } catch (e) {
        next();
    }
}

function findNode(key, currentNode, maxDepth) {
    var i,
    currentChild,
    result;
    if (maxDepth <= 0) {
        return false;
    }
    if (currentNode.hasOwnProperty(key)) {
        return currentNode[key];
    } else {
        // Use a for loop instead of forEach to avoid nested functions
        // Otherwise "return" will not work properly
        for (i = 0; i < Object.keys(currentNode).length; i += 1) {
            currentChild = currentNode[Object.keys(currentNode)[i]];
            // Search in the current child
            result = findNode(key, currentChild, maxDepth - 1);
            // Return the result if the node has been found
            if (result !== false) {
                return result;
            }
    }
    // The node has not been found and we have no more options
    return false;
    }
}

// Parse the Result and Populate Fields
module.exports.postFormatMiddleware = function postFormatMiddleware(req, res, next){
    try {
        var result = res.examples;
        if (res.examples.constructor === Array){
            result = res.data.result;
            result.forEach(
                function(item){
                    Object.keys(res.examples[0]).forEach(
                        function(property){
                            item[property] = findNode(property, item, 3);
                            if (item[property] === false) {
                                item[property] = "";
                            }
                        }
                    );
                }
            );

        } else {
            Object.keys(result).forEach(
                function(property){
                    result[property] = findNode(property, res.data, 3);
                    if (result[property] === false) {
                        result[property] = "";
                    }
                }
            );
        }

        res.end(JSON.stringify(result));
    } catch (e) {
        res.status(499).send(JSON.stringify({"message": "Bad Result"}));
    }
}


